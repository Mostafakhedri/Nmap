import os
import sys
import re
import argparse

try:
    import configparser
except:
    from six.moves import configparser
import json


class Nmap(object):

    def read_cli(self):
        parser = argparse.ArgumentParser()
        parser.add_argument('--show', action='store_true')
        parser.add_argument('--confluence', action='store_true')
        parser.add_argument('--json', action='store_true')
        self.options = parser.parse_args()

    def parse(self, filename):
        myItem = {'IP': "", 'Sockets': []}

        myItems = list()
        with open(filename, "r") as inp:
            pattern_ip = "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}"
            for i in inp.readlines():
                if "MAC Address:" in i:
                    myItems.append(myItem)
                    myItem = {'IP': "", 'Sockets': []}
                if "Nmap scan report" in i:
                    IP = re.search(pattern_ip, i).group()
                    myItem["IP"] = IP
                if re.findall("\d{1,5}/\w+", i):
                    mySocket = {'PORT': "", 'STATE': "", 'SERVICE': ""}
                    mySocket["PORT"] = i.split()[0]
                    mySocket["STATE"] = i.split()[1]
                    mySocket["SERVICE"] = i.split()[2]
                    myItem["Sockets"].append(mySocket)
        return myItems

    def map_iter(self):
        with open("nmap-out.txt", "r") as out:
            pattern_ip = "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}"

            out_j = {

                'IP': "",
                'PORT': [],
                'STATE': [],
                'SERVICE': []

            }

            with open('ooo.txt', 'a')as file1:
                for i in out.readlines():
                    if "Warning" in i:
                        IP = re.search(pattern_ip, i).group()
                        file1.write(IP + '\n')
                        print(IP)
                    if re.findall("\d{1,5}/\w+", i):
                        PORT = i.split()[0]
                        STATE = i.split()[1]
                        SERVICE = i.split()[2]
                        print(PORT + " " + STATE + " " + SERVICE)
                        file1.write(PORT + " " + STATE + " " + SERVICE + "\n")

    def ShowAsJson(self, items):
        with open('json_out_nmap.json', 'w') as js:
            for i in range(len(items)):
                item = items[i]
                print("{", end="")
                print("'IP':'%s', [" % item["IP"])
                for j in range(len(item["Sockets"])):
                    socket = item["Sockets"][j]
                    print("\t {'Port':'%s', 'State':'%s', 'Service':'%s' }" % (
                        socket["PORT"], socket["STATE"], socket["SERVICE"]), end="")
                    if j != len(item["Sockets"]) - 1:
                        print(",")
                print("]", end="")
                print("}", end="")
                if i != len(items) - 1:
                    print(",")
            print()


    def Nmap_Con(self):
        import requests
        credentials = configparser.ConfigParser()
        credentials.read('./confluence.ini')
        user = credentials.get('confluence', 'user')
        password = credentials.get('confluence', 'password')
        auth = (user, password)
        with open('json_out_nmap.json', 'r', encoding='utf-8') as file3:
            out = json.load(file3)
            headers = {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
            }

            environment = "nmap output Documentation"

            table = [

                "PORT",
                "STATE",
                "SERVICE"

            ]

            with open('nmap_table.html', 'w', encoding='utf-8') as f1:
                html = """<html> <h3>This page is generated by MOSTAFA KHEDRI</h3><table border="0">"""

                for a in out:
                    html += "<tr><td><h3>Information for " + a['IP'] + "</h3></td></tr><tr>"
                    for x in table:
                        html += "<td>" + x + "</td>"
                    html += "</tr>"
                    for b in a['Sockets']:
                        if b['PORT'] == '19999/tcp':
                            b['SERVICE'] = 'Netdata'
                        if b['PORT'] == '10050/tcp': 
                            b['SERVICE'] = 'Zabbix'
                        if b['PORT'] == '9100/tcp':
                            b['SERVICE'] = 'Prometheus Node exporter'
                        if b['PORT'] == '9200/tcp':
                            b['SERVICE'] = 'Elasticsearch'
                        html += "<tr><td>" + b['PORT'] + "</td><td>" + b['STATE'] + "</td><td>" + b['SERVICE'] + "</td></tr>"
                html += "</table></html>"
                f1.write(html)

        params = {'spaceKey': 'SRE', 'title': environment}
        result = requests.get("https://confluence.snapp.ir/rest/api/content/", headers=headers, auth=auth,
                              params=params)
        json_output = json.loads(result.text)
        if json_output['results']:
            pid = json_output['results'][0]['id']
            print("Updating: https://confluence.snapp.ir/display/SRE/Nmap" + environment)

        else:
            data = {
                'title': environment,
                'type': 'page',
                'space': {'key': 'SRE'},
                'ancestors': [{'id': '00000000'}]
            }
            result = requests.post("https://confluence.snapp.ir/rest/api/content/", headers=headers, auth=auth,
                                   json=data)
            json_output = json.loads(result.text)
            pid = json_output['id']
            print("Creating: https://confluence.snapp.ir/display/SRE/Nmap" + environment)

        result = requests.get("https://confluence.snapp.ir/rest/api/content/" + pid, headers=headers, auth=auth)
        json_output = json.loads(result.text)
        version = json_output['version']['number']
        data = {
            'type': 'page',
            'title': environment,
            'space': {'key': 'SRE'},
            'body': {
                'storage': {
                    'value': html,
                    'representation': 'storage',
                }
            },
            'version': {
                'number': version + 1,
                "minorEdit": True
            }
        }
        result = requests.put("https://confluence.snapp.ir/rest/api/content/" + pid, headers=headers, auth=auth,
                              json=data)

    # def Show(self, items):
    #     for item in items:
    #         print("IP: %s\n" % item["IP"])
    #         for socket in item["Sockets"]:
    #             print("\t Port:%s   State:%s   Service:%s\n" % (socket["PORT"], socket["STATE"], socket["SERVICE"]))

    # def ShowAsJson(self, items):
    #     for i in range(len(items)):
    #         item = items[i]
    #         print("{", end="")
    #         print("'IP':'%s', [" % item["IP"])
    #         for j in range(len(item["Sockets"])):
    #             socket = item["Sockets"][j]
    #             print("\t {'Port':'%s', 'State':'%s', 'Service':'%s' }" % (
    #                 socket["PORT"], socket["STATE"], socket["SERVICE"]), end="")
    #             if j != len(item["Sockets"]) - 1:
    #                 print(",")
    #         print("]", end="")
    #         print("}", end="")
    #         if i != len(items) - 1:
    #             print(",")
    #     print()

    def __init__(self):

        self.read_cli()

        myList = self.parse("nmap-out.txt")

        if self.options.show:
            self.Show(myList)

        elif self.options.json:
            with open("json_out_nmap.json", 'w') as jsonfile:
                jsonfile.write(json.dumps(myList, indent=2))
            print(json.dumps(myList, indent=2))

        elif self.options.confluence:
            self.Nmap_Con()

        else:
            print("""usage:
            --show: show port per host ip
            --confluence: register show data in confluence""")


Nmap()
